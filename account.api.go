// Code generated by protoc-gen-go_api(github.com/dev-openapi/protoc-gen-go_api version=v1.0.3). DO NOT EDIT.
// source: bilibili-webapp/account.proto

package bilibili_webapp

import (
	context "context"
	fmt "fmt"
	io "io"
	json "encoding/json"
	bytes "bytes"
	http "net/http"
	strings "strings"
	url "net/url"
	multipart "mime/multipart"
)
// Reference imports to suppress errors if they are not otherwise used.
var _ = context.Background
var _ = http.NewRequest
var _ = io.Copy
var _ = bytes.Compare
var _ = json.Marshal
var _ = strings.Compare
var _ = fmt.Errorf
var _ = url.Parse
var _ = multipart.ErrMessageTooLarge


// Client API for Account service

type AccountService interface {
	// GetAccountInfo  获取用户公开信息 https://openhome.bilibili.com/doc/4/feb66f99-7d87-c206-00e7-d84164cd701c
	GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...Option) (*GetAccountInfoRes, error)
	// GetAccountScopes  查询用户已授权权限列表 https://openhome.bilibili.com/doc/4/08f935c5-29f1-e646-85a3-0b11c2830558
	GetAccountScopes(ctx context.Context, in *GetAccountScopesReq, opts ...Option) (*GetAccountScopesRes, error)
}

type accountService struct {
	// opts
	opts *Options
}

func NewAccountService(opts ...Option) AccountService {
	opt := newOptions(opts...)
	if len(opt.addr) <= 0 {
		opt.addr = "https://member.bilibili.com"
	}
	return &accountService {
		opts: opt,
	}
}


func (c *accountService) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...Option) (*GetAccountInfoRes, error) {
	var res GetAccountInfoRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/arcopen/fn/user/account/info", opt.addr)

	// body
	req, err := http.NewRequest("GET", rawURL, nil)
	if err != nil {
		return nil, err
	}
	
	params := req.URL.Query()
	if in.GetAccessToken() != "" {
		params.Add("access_token", fmt.Sprintf("%v", in.GetAccessToken()))
	}
	if in.GetClientId() != "" {
		params.Add("client_id", fmt.Sprintf("%v", in.GetClientId()))
	}	
	req.URL.RawQuery = params.Encode()
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(ctx, opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(ctx, resp, &res)
	return &res, err 

}

func (c *accountService) GetAccountScopes(ctx context.Context, in *GetAccountScopesReq, opts ...Option) (*GetAccountScopesRes, error) {
	var res GetAccountScopesRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/arcopen/fn/user/account/scopes", opt.addr)

	// body
	bs, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	body := bytes.NewReader(bs)
	headers["Content-Type"] = "application/json"

	req, err := http.NewRequest("GET", rawURL, body)
	if err != nil {
		return nil, err
	}
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(ctx, opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(ctx, resp, &res)
	return &res, err 

}
