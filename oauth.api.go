// Code generated by protoc-gen-go_api(github.com/dev-openapi/protoc-gen-go_api version=v1.0.3). DO NOT EDIT.
// source: bilibili-webapp/oauth.proto

package bilibili_webapp

import (
	context "context"
	fmt "fmt"
	io "io"
	json "encoding/json"
	bytes "bytes"
	http "net/http"
	strings "strings"
	url "net/url"
	multipart "mime/multipart"
)
// Reference imports to suppress errors if they are not otherwise used.
var _ = context.Background
var _ = http.NewRequest
var _ = io.Copy
var _ = bytes.Compare
var _ = json.Marshal
var _ = strings.Compare
var _ = fmt.Errorf
var _ = url.Parse
var _ = multipart.ErrMessageTooLarge


// Client API for Oauth service

type OauthService interface {
	// GetAccessToken  获取AccessToken https://openhome.bilibili.com/doc/4/eaf0e2b5-bde9-b9a0-9be1-019bb455701c
	GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...Option) (*GetAccessTokenRes, error)
	// RefreshToken  刷新token https://openhome.bilibili.com/doc/4/eaf0e2b5-bde9-b9a0-9be1-019bb455701c
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...Option) (*RefreshTokenRes, error)
}

type oauthService struct {
	// opts
	opts *Options
}

func NewOauthService(opts ...Option) OauthService {
	opt := newOptions(opts...)
	if len(opt.addr) <= 0 {
		opt.addr = "https://api.bilibili.com"
	}
	return &oauthService {
		opts: opt,
	}
}


func (c *oauthService) GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...Option) (*GetAccessTokenRes, error) {
	var res GetAccessTokenRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/x/account-oauth2/v1/token", opt.addr)

	// body
	req, err := http.NewRequest("POST", rawURL, nil)
	if err != nil {
		return nil, err
	}
	
	params := req.URL.Query()
	if in.GetClientId() != "" {
		params.Add("client_id", fmt.Sprintf("%v", in.GetClientId()))
	}
	if in.GetClientSecret() != "" {
		params.Add("client_secret", fmt.Sprintf("%v", in.GetClientSecret()))
	}
	if in.GetCode() != "" {
		params.Add("code", fmt.Sprintf("%v", in.GetCode()))
	}
	if in.GetGrantType() != "" {
		params.Add("grant_type", fmt.Sprintf("%v", in.GetGrantType()))
	}	
	req.URL.RawQuery = params.Encode()
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(ctx, opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(ctx, resp, &res)
	return &res, err 

}

func (c *oauthService) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...Option) (*RefreshTokenRes, error) {
	var res RefreshTokenRes
	// options
	opt := buildOptions(c.opts, opts...)
	headers := make(map[string]string)
	// route
	rawURL := fmt.Sprintf("%s/x/account-oauth2/v1/refresh_token", opt.addr)

	// body
	req, err := http.NewRequest("POST", rawURL, nil)
	if err != nil {
		return nil, err
	}
	
	params := req.URL.Query()
	if in.GetClientId() != "" {
		params.Add("client_id", fmt.Sprintf("%v", in.GetClientId()))
	}
	if in.GetClientSecret() != "" {
		params.Add("client_secret", fmt.Sprintf("%v", in.GetClientSecret()))
	}
	if in.GetGrantType() != "" {
		params.Add("grant_type", fmt.Sprintf("%v", in.GetGrantType()))
	}
	if in.GetRefreshToken() != "" {
		params.Add("refresh_token", fmt.Sprintf("%v", in.GetRefreshToken()))
	}	
	req.URL.RawQuery = params.Encode()
	
	// header
	for k, v := range headers {
		req.Header.Set(k, v)
	}
	resp, err := opt.DoRequest(ctx, opt.client, req)
	if err != nil {
		return nil, err
	}
	err = opt.DoResponse(ctx, resp, &res)
	return &res, err 

}
